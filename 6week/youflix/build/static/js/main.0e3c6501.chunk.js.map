{"version":3,"sources":["logo.svg","component/navbar/Navbar.js","component/content/Content.js","component/contentList/ContentList.js","component/fullcontent/FullContent.js","actions.js","container/MainView.js","component/contentView/ContentView.js","container/Search.js","App.js","serviceWorker.js","reducers.js","configureStore.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","NavLink","activeClassName","exact","to","Component","ContentView","props","url","children","FullContentLink","onClick","onChangeFullContent","Content","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onHover","setState","isShow","onUnHover","content","displayImg","imgSrc","src","state","name","_this2","onMouseEnter","onMouseLeave","Content_FullContentLink","Content_ContentView","ContentList","console","log","contents","count","Math","ceil","length","component","i","dataPerRow","slice","push","map","item","index","key","component_content_Content","listRender","FullContent","frameBorder","allowFullScreen","allow","REQUEST_CONTENTS","RECEIVE_CONTENTS","REMOVE_CONTENTS","CHANGE_FULL_CONTENT","CHANGE_KEYWORD","requestContents","receiveContents","receiveAt","Date","now","changeFullContent","API","_ref3","_ref3$keyword","keyword","_ref3$token","token","_ref3$maxResults","maxResults","URL","api","concat","axios","get","setContents","data","list","items","forEach","snippet","title","setSearchContents","videoId","MainView","handleFullContentChange","changeViewContent","fetchContents","removeContents","component_fullcontent_FullContent","currentViewContent","component_contentList_ContentList","connect","contentsByYoutube","selectedContent","isFetching","lastUpdated","viewContent","dispatch","then","_ref","catch","e","width","height","match","params","Search","handleInputChange","target","value","handleSubmit","changeKeyword","preventDefault","prevProps","fetchSearchContent","onSubmit","onChange","placeHolder","selectedKeyword","_ref2","Main","Switch","Route","path","App","component_navbar_Navbar","App_Main","Boolean","window","location","hostname","initialState","rootReducer","combineReducers","arguments","undefined","action","assign","lasetUpdated","receivedAt","createStoreWithMiddleware","applyMiddleware","thunk","createStore","ReactDOM","render","es","store","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e3c6501.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';//화면 이동을 위해 Link를 react-router-dom에서 불러옴\r\nimport './Navbar.css';\r\n\r\n//상단 메뉴를 가지고 있는 컴포넌트\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n       <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark-trans \">\r\n\t\t  <a className=\"navbar-brand logo\" href=\"#\">YOUFLIX</a>\r\n\t\t  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t    <span className=\"navbar-toggler-icon\"></span>\r\n\t\t  </button>\r\n\r\n\t\t  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\t\t    <ul className=\"navbar-nav mr-auto\">\r\n\t\t      <li className=\"nav-item\">\r\n\t\t        {/* \r\n\t\t\t\t\tLink 컴포넌트를 이용해 url을 \"/\"로 변경하고 홈 화면을 렌더링\r\n\t\t        */}\r\n\t\t        <NavLink activeClassName=\"active\" exact className=\"nav-link\" to=\"/\">Home</NavLink>\r\n\r\n\t\t      </li>\r\n\t\t       <li className=\"nav-item\">\r\n\t\t        {/* \r\n\t\t\t\t\tLink 컴포넌트를 이용해 url을 \"/\"로 변경하고 홈 화면을 렌더링\r\n\t\t        */}\r\n\t\t        <NavLink activeClassName=\"active\" className=\"nav-link\" to=\"/search\">Search</NavLink>\r\n\r\n\t\t      </li>\r\n\t\t    </ul>\r\n\t\t  </div>\r\n\t\t</nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport \"./Content.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContentView = (props) => {\r\n      let url = \"/view/\"+props.id\r\n      return (<NavLink to={url}>\r\n                {props.children}\r\n              </NavLink>)\r\n    }\r\n\r\nconst FullContentLink = (props) => {\r\n    return (<a onClick={props.onChangeFullContent}>\r\n              {props.children}\r\n            </a>)\r\n    }\r\n\r\nclass Content extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\r\n\t  this.state = {\r\n\t  \tisShow: false\r\n\t  };\r\n\t}\r\n\r\n\tonHover = () => {\r\n\t\tthis.setState({isShow:true})\r\n\t}\r\n\r\n\tonUnHover = () => {\r\n\t\tthis.setState({isShow:false})\r\n\t}\r\n\r\n  onChangeFullContent = () => {\r\n    this.props.onClick(this.props.content)\r\n  }\r\n\r\n  displayImg = () => {\r\n    let imgSrc = \"https://img.youtube.com/vi/\"+this.props.content.id+\"/0.jpg\"\r\n    let imgComponent = (<div><img className=\"thumbnail\" src={imgSrc} />{this.state.isShow?(<div className=\"middle\"><div className=\"text\"> {this.props.content.name} </div></div>):\"\"}</div>);\r\n \r\n    return imgComponent\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content\" onMouseEnter={() => this.onHover()} onMouseLeave={() => this.onUnHover()}>\r\n      {this.props.onClick?\r\n        (<FullContentLink onChangeFullContent={this.onChangeFullContent}>{this.displayImg()}</FullContentLink>):\r\n        (<ContentView id={this.props.content.id}>{this.displayImg()}</ContentView>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nContent.propTypes = {\r\n  onClick : PropTypes.func,\r\n  content: PropTypes.object\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from 'react';\r\nimport './ContentList.css';\r\nimport Content from \"../content/Content.js\"\r\nimport PropTypes from \"prop-types\";\r\n\r\n//콘텐츠의 리스트를 보여주는 컴포넌트\r\nclass ContentList extends Component {\r\n\r\n  //한줄에 4개의 콘텐츠를 출력 하기 위해서 컴포넌트를 구성해주는 함수\r\n  listRender() {\r\n    console.log(this.props.contents)\r\n  \tvar count = Math.ceil(this.props.contents.length/4)//현재 콘텐츠를 한줄에 4개씩 보여주면 몇줄이 나오는지를 구함\r\n  \tlet component = [] //컴포넌트를 담을 배열 선언\r\n  \tfor(let i =0;i<count;i++) {//반복문을 이용해서 한줄씩 컴포넌트를 만들어줌\r\n  \t\tlet dataPerRow = this.props.contents.slice(i*4,i*4+4)//slice를 이용해서 그 줄에 들어가야 하는 데이터를 반환받음\r\n                                                    //현재줄*4번째 부터 현재줄*4+4 하면 0번째 줄일때는 0부터 3까지\r\n                                                    //1번째 줄일때는 4부터 7까지의 데이터를 불러온다.\r\n\r\n      //위에서 선언한 배열에 한줄을 구성하는 컴포넌트를 push한다.\r\n      //push는 배열의 맨뒤에 데이터를 넣을때 사용 하는 함수이다.\r\n      //이런 식으로 컴포넌트를 추가 가능한 이유는 첫번째 시간에 말했던것 처럼 jsx는 결국 js를 좀더 편리하게 보여주는 역할일뿐\r\n      //결국 jsx가 읽혀질때는 xml형태의 js로 변환되기 때문이다.\r\n  \t\tcomponent.push(\r\n        // row는 부트스트랩에서 한줄을 의미 하는 class이다.\r\n  \t\t\t<div className=\"row\">\r\n  \t\t\t\t{\r\n            //위에서 4개의 데이터를 뽑아서 저장해 가지고 있던 배열을 map을 이용해서 4개의 콘텐츠를 그려준다.\r\n  \t\t\t\t\tdataPerRow.map((item,index) => {\r\n\t\t\t      \t\treturn (\r\n                  // 반복문 안에서 jsx를 사용할때는 반드시 key를 써줘야 한다.\r\n                  // col-md-3은 한 줄을 12등분 했을때 3칸만큼을 차지 하겠다는 의미이다.\r\n\t\t\t      \t\t  <div className=\"col-md-3\" key={index}>\r\n\t\t\t\t\t      \t  {/* \r\n                      콘텐츠를 표현해주는 content component를 선언하는데 이때 onClick이벤트를 props로 넘겨준다.\r\n                      이 이벤트는 콘텐츠를 눌렀을때 상단의 실행되는 플레이어를 변경하는 이벤트 이다.\r\n                    */}\r\n                    <Content content={item} onClick={this.props.onClick}/>\r\n\t\t\t\t\t        </div>\r\n\t\t\t      \t\t)\r\n\t\t\t      \t})\r\n  \t\t\t\t}\r\n  \t\t\t</div>\r\n  \t\t)\r\n  \t}\r\n\r\n  \treturn component\r\n  }\t\r\n  render() {\r\n  \t\r\n\r\n    return (\r\n      <div className=\"contentList align-items-center justify-content-center\">\r\n\t      {/*\r\n          리스트를 렌더링해주는 함수를 실행 시킨다.\r\n        */}\r\n        {this.listRender()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContentList.propTypes = {\r\n  contents: PropTypes.array,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default ContentList;\r\n","import React, { Component } from 'react';\r\nimport \"./FullContent.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//홈화면에서 영상을 실행시키는 컴포넌트\r\nclass FullContent extends Component {\r\n  render() { \r\n    return (\r\n      <div className=\"FullContent\">\r\n      \t{/*\r\n          유튜브를 실행 시키기 위해서는 iframe을 사용해야 하는데, 유튜브 api로 실행 시킬 주소를 받아와서 \r\n          iframe으로 실행 시킨다.\r\n        */}\r\n        <iframe\r\n      \t\tclassName=\"my-iframe\"\r\n      \t\tframeBorder=\"0\"\r\n      \t\tsrc={\"https://www.youtube.com/embed/\"+this.props.content.id+\"?autoplay=1&rel=0\"}\r\n      \t\tallowFullScreen={true}\r\n      \t\tallow=\"autoplay\"\r\n      \t\t/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFullContent.propTypes = {\r\n  content: PropTypes.object\r\n}\r\n\r\nexport default FullContent;\r\n","import axios from \"axios\";\r\n\r\n//action type\r\nexport const REQUEST_CONTENTS = \"REQUEST_CONTENTS\";\r\nexport const RECEIVE_CONTENTS = \"RECEIVE_CONTENTS\";\r\nexport const REMOVE_CONTENTS = \"REMOVE_CONTENTS\";\r\nexport const CHANGE_FULL_CONTENT = \"CHANGE_FULL_CONTENT\";\r\nexport const CHANGE_KEYWORD = \"CHANGE_KEYWORD\";\r\n\r\n//액션생성자(action creator)\r\n//어떤 데이터를 변경할 건지를 정의 하는 부분\r\nconst requestContents = () => ({type: REQUEST_CONTENTS})\r\nconst receiveContents = (content) => ({\r\n\ttype:RECEIVE_CONTENTS, \r\n\tcontents: content,\r\n\treceiveAt: Date.now()\r\n\t})\r\n\r\nexport const removeContents = () => ({\r\n\ttype:REMOVE_CONTENTS,\r\n})\r\n\r\nexport const changeFullContent = (content) => ({\r\n\ttype: CHANGE_FULL_CONTENT,\r\n\tcontent : content\r\n})\r\n\r\nexport const changeKeyword = (keyword) => ({\r\n\ttype: CHANGE_KEYWORD,\r\n\tkeyword\r\n})\r\n\r\nconst token = 'AIzaSyAsNDtwveKzPT0SWzREwuBpmswH18CIffg'\r\nconst maxResults = 30\r\n\r\n//비동기 action creator로 유튜브로부터 데이터를 ajax통신으로 받아와서\r\n//동기 action creator를 dispatch해서 데이터를 변화시킴\r\nexport const fetchContents = () => {\r\n\treturn dispatch => {\r\n\t\tdispatch(requestContents())\r\n\t\treturn API({token,maxResults})\r\n\t\t\t.then(({data}) => setContents(data))\r\n\t\t\t.then(contents => {\r\n\t\t\t\tdispatch(changeFullContent(contents[0]))\r\n\t\t\t\tdispatch(receiveContents(contents.slice(1,contents.length)))\r\n\t\t\t})\r\n\t\t\t.catch(e => {\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\n//비동기 action creator로 유튜브로부터 데이터를 ajax통신으로 받아와서\r\n//동기 action creator를 dispatch해서 데이터를 변화시킴\r\nexport const fetchSearchContent = (keyword) => {\r\n\treturn dispatch => {\r\n\t\tdispatch(requestContents())\r\n\t\treturn API({token,maxResults,keyword})\r\n\t\t\t.then(({data}) => setSearchContents(data))\r\n\t\t\t.then(contents => {\r\n\t\t\t\tdispatch(receiveContents(contents))\r\n\t\t\t})\r\n\t\t\t.catch(e => {\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\n//youtube와 ajax통신할때 공통적으로 사용하는 로직을 함수로 구현\r\nconst API = ({keyword=\"\", token=\"\", maxResults=30}) => {\r\n\tconst URL = \"https://www.googleapis.com/youtube/v3/\"\r\n\r\n\tif( keyword === \"\" ) {\r\n\t\tvar api = URL+`videos?part=snippet&chart=mostPopular&key=${token}&maxResults=${maxResults}`\r\n\t} else  {\r\n\t\tvar api = URL+`search?q=${keyword}&part=snippet&key=${token}&maxResults=${maxResults}`\r\n\t}\r\n\r\n\treturn axios.get(api)\r\n}\r\n\r\n//mainView의 화면에 들어가는 데이터를 파싱\r\n const setContents = (data) => { \r\n   let list = []\r\n   console.log(data)\r\n    data.items.forEach((item, index) => {\r\n        list.push({id:item.id,name:item.snippet.title})\r\n    })\r\n    return list\r\n  }\r\n\r\n//search 컴포넌트에 들어가는 데이터를 파싱\r\n const setSearchContents = (data) => { \r\n   let list = []\r\n   console.log(data)\r\n    data.items.forEach((item, index) => {\r\n        list.push({id:item.id.videoId,name:item.snippet.title})\r\n    })\r\n    return list\r\n  }","import React, { Component } from 'react';\r\nimport './MainView.css';\r\nimport ContentList from \"../component/contentList/ContentList.js\";\r\nimport FullContent from '../component/fullcontent/FullContent.js';\r\nimport { connect } from 'react-redux';\r\nimport { fetchContents, changeFullContent, removeContents } from \"../actions\";\r\n\r\nclass MainView extends Component {\r\n//컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\r\n  componentDidMount() {\r\n    this.props.fetchContents()//mapDispatchToProps에서 선언한 유튜브데이터를 불러오는 액션\r\n  }\r\n\r\n//컴포넌트 종료시 contents 초기화\r\n  componentWillUnmount() {\r\n    this.props.removeContents()//mapDispatchToProps에서 선언한 contents를 초기화하는 액션\r\n  }\r\n\r\n//메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\r\n//이 함수를 이용해서 영상을 변경 한다.\r\n  handleFullContentChange = (content) => {\r\n    this.props.changeViewContent(content)//mapDispatchToProps에서 선언한 viewContent를 변환하는 액션\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mainView\">\r\n      \t{/*\r\n\t\t\t영상을 실행 시키는 컴포넌트 \r\n         redux로 부터 받은 currentViewContent를 props로 사용\r\n      \t*/}\r\n      \t<FullContent content={this.props.currentViewContent}/>\r\n      \t{/*\r\n\t\t\t실행할 영상 리스트를 출력하는 컴포넌트\r\n        redux로 부터 받은 contents를 props로 사용\r\n      \t*/}\r\n       \t<ContentList contents={this.props.contents} onClick={this.handleFullContentChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//store의 state를 컴포넌트의 props로 전달 시켜줌\r\nconst mapStateToProps = (state) => {\r\n  //store는 state를 리듀서 단위로 가지고 있어서 각각의 리듀서를 불러와서\r\n  //컴포넌트에 props로 전달할 값들을 뽑아낸다.\r\n  const { contentsByYoutube, selectedContent } = state\r\n  const {\r\n    isFetching,\r\n    lastUpdated,\r\n    items: contents,\r\n  } = contentsByYoutube\r\n\r\n  const { \r\n    viewContent: currentViewContent\r\n  } = selectedContent\r\n\r\n  return {\r\n    isFetching,\r\n    contents,\r\n    lastUpdated,\r\n    currentViewContent\r\n  }\r\n}\r\n\r\n//action을 미리 dispatch해서 컴포넌트의 props로 전달 해주는 함수\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContents: () => dispatch(fetchContents()),\r\n  changeViewContent: (content) => dispatch(changeFullContent(content)),\r\n  removeContents : () => dispatch(removeContents())\r\n});\r\n\r\n//connect함수를 이용해 container component와 redux를 연결\r\n//connect함수는 컴포넌트의 props와 store의 데이터를 연결 시켜주는 함수를 리턴\r\n//mapStateToProps, MapDispatchToProps는 connect함수의 인자로 따로 선언해줘야 함\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MainView);\r\n","import React, { Component } from 'react';\r\nimport \"./ContentView.css\";\r\n\r\n//영상 리스트를 눌렀을때 플레이어 화면만 보여주고 싶을때 사용하는 컴포넌트\r\nclass ContentView extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"ContentView\">\r\n        {/*\r\n          유튜브를 실행 시키기 위해서는 iframe을 사용해야 하는데, 유튜브 api로 실행 시킬 주소를 받아와서 \r\n          iframe으로 실행 시킨다.\r\n        */}\r\n       \t<iframe\r\n       \t\tclassName=\"content-view-iframe\"\r\n      \t\tframeBorder=\"0\"\r\n      \t\twidth=\"100%\" height=\"100vw\"\r\n      \t\tsrc={\"https://www.youtube.com/embed/\"+this.props.match.params.id}\r\n      \t\tallowFullScreen={true}\r\n      \t\tallow=\"autoplay; encrypted-meida\"\r\n      \t\t/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContentView;\r\n","import React , { Component } from 'react'\r\nimport ContentList from \"../component/contentList/ContentList.js\"\r\nimport { connect } from \"react-redux\"\r\nimport { fetchSearchContent,changeKeyword } from \"../actions\"\r\n\r\nclass Search extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n    //keyword를 입력받기 위한 state\r\n\t  this.state = {\r\n\t  \tkeyword: \"\"\r\n\t  };\r\n\t}\r\n\r\n\thandleInputChange = (e) => {\r\n    \tthis.setState({keyword:e.target.value})\r\n  }\r\n\r\n  //입력받은 키워드를 submit할때 redux에서 관리하는 keyword로 \r\n  //state.keyword를 전달\r\n  handleSubmit = (e) => {\r\n    this.props.changeKeyword(this.state.keyword)\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n  //redux에 의해서 props.keyword가 업데이트 되면\r\n  //키워드로 유튜브의 동영상을 검색하는 액션 실행\r\n  componentDidUpdate(prevProps) {\r\n    if(this.props.keyword !== prevProps.keyword) {\r\n      this.props.fetchSearchContent(this.props.keyword)\r\n    }\r\n  }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Search\">\r\n            <form className=\"\" onSubmit={this.handleSubmit}>\r\n              <div className=\"form-group row align-items-center justify-content-center\">\r\n                <div className=\"col-md-3\">\r\n                  <label>검색</label>\r\n                  <input type=\"text\" value={this.state.keyword} onChange={this.handleInputChange} className=\"form-control keyword\" placeHolder=\"Seacrh...\"/>\r\n                </div>\r\n              </div>\r\n            </form>\r\n\r\n            <ContentList contents={this.props.contents} />\r\n          </div>\t\t\r\n\t    )\r\n\t}\r\n}\r\n//store의 state를 컴포넌트의 props로 전달 시켜줌\r\nconst mapStateToProps = state => {\r\n  //store는 state를 리듀서 단위로 가지고 있어서 각각의 리듀서를 불러와서\r\n  //컴포넌트에 props로 전달할 값들을 뽑아낸다.\r\n  const { contentsByYoutube, selectedKeyword } = state\r\n  const { keyword } = selectedKeyword\r\n  const {\r\n    isFetching,\r\n    lastUpdated,\r\n    items: contents,\r\n  } = contentsByYoutube\r\n\r\n  return {\r\n    keyword,\r\n    isFetching,\r\n    lastUpdated,\r\n    contents\r\n  }\r\n}\r\n\r\n//action을 미리 dispatch해서 컴포넌트의 props로 전달 해주는 함수\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeKeyword:(keyword) => dispatch(changeKeyword(keyword)),\r\n  fetchSearchContent: (keyword) => dispatch(fetchSearchContent(keyword))\r\n});\r\n\r\n//connect함수를 이용해 container component와 redux를 연결\r\n//connect함수는 컴포넌트의 props와 store의 데이터를 연결 시켜주는 함수를 리턴\r\n//mapStateToProps, MapDispatchToProps는 connect함수의 인자로 따로 선언해줘야 함\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';//bootstrap css를 사용하기 위해서 불러옵니다.\r\nimport Navbar from './component/navbar/Navbar.js';\r\nimport MainView from './container/MainView.js';\r\nimport ContentView from './component/contentView/ContentView.js';\r\nimport Search from \"./container/Search.js\"\r\nimport {Switch, Route } from 'react-router-dom'//router를 사용하기 위해서 react router dom 불러옵니다.\r\n\r\n//router를 감싸고 있는 함수형 컴포넌트\r\nconst Main =()=>(//라우팅할때 url이 중복되는것을 막기 위해서 switch 사용\r\n\t\t<Switch>\r\n      {/* \r\n          \"/\" 을 가지는 /serach, /view/:id로 이동을 하면 \"/\"이 포함되어있기 때문에 MainView또한 렌더링이 됩니다.\r\n          이것을 막기 위해서 exact속성을 추가 합니다.\r\n      */}\r\n\t\t\t<Route exact path=\"/\" component={MainView}></Route>\r\n      {/*\r\n          \"/view/:id\"에 url이 이동했을때 ContentView 컴포넌트를 렌더링합니다.\r\n          여기에서 \":id\" 이 부분은 url에 변화가 필요할때 사용하는 방식 입니다.\r\n          \":이름\"\" 이렇게 설정하면 url을 /view/123, /view/555 라고 해도 ContetnView 컴포넌트를 렌더링하게됩니다.\r\n      */}\r\n\t\t\t<Route  path=\"/view/:id\" component={ContentView}></Route>\r\n\r\n      <Route path=\"/search\" component={Search}></Route>\r\n\t\t</Switch>\r\n\t)\r\n\r\nclass App extends Component {\r\n  render() { \r\n    return (\r\n      <div className=\"App\">\r\n        {/* 네이게이션바 컴포넌트*/}\r\n        <Navbar />\r\n        {/* 라우터를 가지고 있는 컴포넌트*/}\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { REQUEST_CONTENTS, RECEIVE_CONTENTS,\r\n\t\tCHANGE_FULL_CONTENT, CHANGE_KEYWORD,\r\n\t\tREMOVE_CONTENTS } from \"./actions\";\r\n\r\nfunction selectedKeyword(state = {\r\n\tkeyword: \"\"\r\n}, action) {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_KEYWORD:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tkeyword:action.keyword\r\n\t\t\t})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n} \r\n\r\nfunction selectedContent(state = {\r\n\tviewContent: {}\r\n}, action ) {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_FULL_CONTENT:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tviewContent: action.content\r\n\t\t\t})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nfunction contentsByYoutube(state = {\r\n\tisFetching:false,\r\n\titems: []\r\n\t}, action) {\r\n\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_CONTENTS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tisFetching: true\r\n\t\t\t})\r\n\t\tcase RECEIVE_CONTENTS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tisFetching: false,\r\n\t\t\t\titems: action.contents,\r\n\t\t\t\tlasetUpdated: action.receivedAt\r\n\t\t\t})\r\n\t\tcase REMOVE_CONTENTS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\titems: []\r\n\t\t\t})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\tcontentsByYoutube,\r\n\tselectedContent,\r\n\tselectedKeyword\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(\r\n\tthunk\r\n\t)(createStore);\r\n\r\n\r\nexport default function configureStore(initialState) {\r\n\treturn createStoreWithMiddleware(rootReducer, initialState);\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './configureStore';\r\n\r\nReactDOM.render((\r\n\t//redux와 react를 연결하기 위해서 Provider로 최상위 컴포넌트를 감싸야함\r\n\t//react에 store객체를 전달해서 redux를 사용할수 있게 함\r\n\t<Provider store={configureStore()}>\r\n\t{/*모든 컴포넌트에서 react router가 동작하기 위해서는 최상위 컴포넌트를 \r\n\tBrwoserRouter로 감싸야함*/}\r\n\t\t<BrowserRouter>\r\n\t\t\t<App />\r\n\t\t</BrowserRouter>\r\n\t</Provider>\r\n\t\t),document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}